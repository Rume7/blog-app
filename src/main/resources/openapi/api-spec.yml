openapi: 3.0.3
info:
  title: Blog API
  description: API documentation for Blog Application
  version: 1.0.0
  contact:
    name: CodeHacks Support
    email: support@codehacks.com
    url: https://codehacks.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://codehacks.com/terms

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          minLength: 5
          maxLength: 25
        password:
          type: string
          pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@#$%^&+=!]{6,}$"
        email:
          type: string
          format: email
        role:
          type: string
          enum: [USER, ADMIN, AUTHOR]

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    UserDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        role:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string

    PasswordChangeRequest:
      type: object
      required:
        - username
        - currentPassword
        - newPassword
      properties:
        username:
          type: string
        currentPassword:
          type: string
        newPassword:
          type: string
          pattern: "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$"

    RoleChangeRequest:
      type: object
      required:
        - username
        - userRole
      properties:
        username:
          type: string
        userRole:
          type: string
          enum: [USER, ADMIN, AUTHOR]

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object

    Post:
      type: object
      required:
        - title
        - content
      properties:
        id:
          type: integer
        title:
          type: string
          minLength: 3
          maxLength: 100
        content:
          type: string
          minLength: 10
        author:
          $ref: '#/components/schemas/Author'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Author:
      type: object
      required:
        - firstName
        - lastName
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email

    CommentDto:
      type: object
      required:
        - content
        - postId
      properties:
        id:
          type: integer
        content:
          type: string
        postId:
          type: integer
        createdAt:
          type: string
          format: date-time

paths:
  /api/v1/auth/register:
    post:
      summary: Register new user
      tags:
        - Authentication
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login with token
          headers:
            Authorization:
              schema:
                type: string
                description: JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/auth/change-password:
    put:
      summary: Change user password
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        description: Password change request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid password data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/auth/change-role:
    put:
      summary: Change user role
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        description: Role change request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleChangeRequest'
      responses:
        '200':
          description: Role changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Not authorized to change roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/auth/delete-account:
    delete:
      summary: Delete a user account
      tags:
        - Authentication
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: query
          description: The username of the user to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Not authorized to delete this account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/auth/logout:
    post:
      summary: Log out a user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: string

  /api/v1/users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Not authorized to view users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/users/me:
    get:
      summary: Get current user details
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/blog/all:
    get:
      summary: Get all blog posts
      tags:
        - Blog
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /api/v1/blog/{id}:
    get:
      summary: Get a single blog post by ID
      tags:
        - Blog
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the post to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/blog/create:
    post:
      summary: Create a new blog post
      tags:
        - Blog
      security:
        - bearerAuth: []
      requestBody:
        description: Blog post to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid post data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Not authorized to create posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/blog/update/{id}:
    put:
      summary: Update an existing blog post
      tags:
        - Blog
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the post to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated blog post data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid post data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Not authorized to update this post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/blog/delete/{id}:
    delete:
      summary: Delete an existing blog post
      tags:
        - Blog
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the post to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Not authorized to delete this post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/blog/previews:
    get:
      summary: Get a preview of blog posts
      tags:
        - Blog
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of post previews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /api/v1/comments/{postId}/comments:
    post:
      summary: Add a comment to a post
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: ID of the post to comment on
          required: true
          schema:
            type: integer
      requestBody:
        description: Comment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid comment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/comments/update/{postId}/{commentId}:
    put:
      summary: Update a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: ID of the post
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: ID of the comment to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated comment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid comment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Comment or post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/comments/{id}:
    get:
      summary: Get a comment by ID
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the comment to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/comments/post/{postId}:
    get:
      summary: Get all comments for a post
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: ID of the post
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/comments/delete/{id}:
    delete:
      summary: Delete a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the comment to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Not authorized to delete this comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'