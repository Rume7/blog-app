name: Blog-App CI Pipeline

on:
  push:
    branches:
      - main          # Checks the main branch
      - '**'          # Checks other branches
  pull_request:
    branches:
      - main          # Checks PRs targeting the main branch
      - '**'          # Checks PRs targeting any branch

jobs:
  analyze:
    name: CodeQL ${{ matrix.language }} Analysis
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false

    permissions:
      contents: read
      packages: write

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      TESTCONTAINERS_RYUK_DISABLED: true  # Fix for Testcontainers in CI
      TESTCONTAINERS_CHECKS_DISABLE: true # Disables unnecessary startup checks
      TESTCONTAINERS_REUSE_ENABLE: true   # Enables Testcontainers reuse
      SPRING_PROFILES_ACTIVE: test

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: blog_test_db
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Up Buildx (Improves Caching)
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Configure Docker credentials
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          logout: false

      - name: Get version from pom.xml
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Build JAR with version
        run: |
          echo "Building JAR with version: $VERSION"
          mvn clean package -DskipTests
          ls -la target/

      - name: Verify JAR File
        run: |
          echo "Verifying JAR file with version: $VERSION"
          if [ ! -f "target/blog-app-$VERSION.jar" ]; then
            echo "❌ JAR file not found!"
            ls -la target/
            exit 1
          fi
          echo "✅ Found JAR file: target/blog-app-$VERSION.jar"

      - name: Verify PostgreSQL Connection
        run: |
          sudo apt-get install -y postgresql-client
          for i in {1..10}; do
            if PGPASSWORD=test psql -h localhost -U test -d blog_test_db -c "SELECT version();" > /dev/null 2>&1; then
              echo "✅ PostgreSQL is ready!"
              break
            fi
            echo "⏳ Waiting for PostgreSQL to be ready... ($i/10)"
            sleep 5
          done

      - name: Run Tests
        run: mvn clean verify -X -Dspring.testcontainers.reuse.enable=true

      # Build and push Docker image with version tag
      - name: Build and Push Docker Image
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          echo "Building Docker image with version: $VERSION"
          
          # Build the image
          docker buildx build \
            --platform linux/amd64 \
            --build-arg VERSION=$VERSION \
            --label org.opencontainers.image.version=$VERSION \
            --label org.opencontainers.image.revision=${{ github.sha }} \
            --label org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --cache-from=type=registry,ref=rume7/blog-app:latest \
            --cache-to=type=inline \
            -t rume7/blog-app:$VERSION \
            -t rume7/blog-app:latest \
            -t rume7/blog-app:${{ github.sha }} \
            --push \
            .
          
          echo "✅ Successfully built and pushed Docker images"

  version-bump:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to create a branch from main

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get version from pom.xml
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create branch, commit, and push
        run: |
          BRANCH="ci/version-bump-${{ steps.get_version.outputs.version }}"
          git checkout -b $BRANCH
          
          # Commit a dummy change or version bump if needed (adjust if this is done earlier)
          echo "# Version ${{ steps.get_version.outputs.version }}" > VERSION.txt
          git add VERSION.txt
          git commit -m "chore: bump version to ${{ steps.get_version.outputs.version }}"
          git push origin $BRANCH

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ci/version-bump-${{ steps.get_version.outputs.version }}
          title: "chore: bump version to ${{ steps.get_version.outputs.version }}"
          body: "Automated version bump PR created by GitHub Actions."
          base: main
