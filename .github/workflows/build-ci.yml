name: Blog-App CI Pipeline

on:
  push:
    branches:
      - main          # Checks the main branch
      - '**'          # Checks other branches
  pull_request:
    branches:
      - main          # Checks PRs targeting the main branch
      - '**'          # Checks PRs targeting any branch

jobs:
  analyze:
    name: CodeQL ${{ matrix.language }} Analysis
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      TESTCONTAINERS_RYUK_DISABLED: true  # Fix for Testcontainers in CI
      TESTCONTAINERS_CHECKS_DISABLE: true # Disables unnecessary startup checks
      TESTCONTAINERS_REUSE_ENABLE: true   # Enables Testcontainers reuse

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: blog_test_db
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

#      - name: Build backend
#        run: mvn clean package

      - name: Verify PostgreSQL Connection
        run: |
            sudo apt-get install -y postgresql-client
            PGPASSWORD=test psql -h localhost -U test -d blog_test_db -c "SELECT version();"

      - name: Build and Test
        run: mvn clean package -Dspring.testcontainers.reuse.enable=true

      #      - name: SonarQube Scan
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn sonar:sonar \
#          -Dsonar.projectKey=my_project_key \
#          -Dsonar.host.url=https://your-sonarqube-server.com \
#          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Build Docker image
        run: docker build -t blog-app:${{ github.sha }} .
      