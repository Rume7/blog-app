name: Blog-App CI Pipeline

on:
  push:
    branches:
      - main          # Checks the main branch
      - '**'          # Checks other branches
  pull_request:
    branches:
      - main          # Checks PRs targeting the main branch
      - '**'          # Checks PRs targeting any branch

jobs:
  analyze:
    name: CodeQL ${{ matrix.language }} Analysis
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      TESTCONTAINERS_RYUK_DISABLED: true  # Fix for Testcontainers in CI
      TESTCONTAINERS_CHECKS_DISABLE: true # Disables unnecessary startup checks
      TESTCONTAINERS_REUSE_ENABLE: true   # Enables Testcontainers reuse
      SPRING_PROFILES_ACTIVE: test

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: blog_test_db
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Check Docker Version
        run: docker --version

      - name: Set Up Buildx (Improves Caching)
        uses: docker/setup-buildx-action@v2

      - name: Check Docker Info
        run: docker info

      - name: Verify PostgreSQL Connection
        run: |
          sudo apt-get install -y postgresql-client
          for i in {1..10}; do
            if PGPASSWORD=test psql -h localhost -U test -d blog_test_db -c "SELECT version();" > /dev/null 2>&1; then
              echo "✅ PostgreSQL is ready!"
              break
            fi
            echo "⏳ Waiting for PostgreSQL to be ready... ($i/10)"
            sleep 5
          done

      - name: Run Tests with Debug Logging
        run: mvn clean verify -X -Dspring.testcontainers.reuse.enable=true

      - name: Check Running Docker Containers
        run: docker ps -a

      - name: Run Only SecurityConfigTest
        run: mvn -Dtest=SecurityConfigTest test -X
      
      #      - name: Build and Test with Single Thread
      #        run: mvn clean verify -Dspring.testcontainers.reuse.enable=true -DforkCount=1
      
      #      - name: SonarQube Scan
      #        env:
      #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #        run: mvn sonar:sonar \
      #          -Dsonar.projectKey=my_project_key \
      #          -Dsonar.host.url=https://your-sonarqube-server.com \
      #          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Get version from pom.xml
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if secrets are set (for debug)
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME != '' && '✅ Set' || '❌ Not Set' }}"
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD != '' && '✅ Set' || '❌ Not Set' }}"

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build and push Docker image with version tag
      - name: Build and push Docker image with version
        run: |
          docker pull rume7/blog-app:latest || true
          
          docker build --cache-from=rume7/blog-app:latest -t rume7/blog-app:${{ env.VERSION }} .
          
          docker tag rume7/blog-app:${{ env.VERSION }} rume7/blog-app:${{ github.sha }}
          
          docker push rume7/blog-app:${{ env.VERSION}}
          docker push rume7/blog-app:${{ github.sha }}

      # Optionally, you can push the image as the 'latest' version after successful deployment, to always have a reference to the most recent build.
      - name: Tag and push as latest version
        run: |
          docker tag rume7/blog-app:${{ env.VERSION }} rume7/blog-app:latest
          docker push rume7/blog-app:latest